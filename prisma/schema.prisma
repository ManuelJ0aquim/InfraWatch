generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id                 String               @id @default(uuid())
  name               String
  type               ServiceType
  target             String
  snmpCommunity      String?
  snmpPort           Int?                 @default(161)
  ownerId            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  glpiId             String?              @unique
  AlertContact       AlertContact[]
  Incident           Incident[]
  NotificationPolicy NotificationPolicy[]
  User               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  SliTarget          SliTarget[]

  @@index([ownerId])
  @@index([type])
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  password             String
  role                 Role      @default(USER)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  passwordResetExpires DateTime?
  passwordResetToken   String?
  Service              Service[]
}

model SliTarget {
  id         String   @id @default(uuid())
  serviceId  String
  metric     String
  threshold  Float
  comparison String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, metric])
}

model AlertContact {
  id        String   @id @default(uuid())
  channel   String
  to        String
  active    Boolean  @default(true)
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, active])
}

model Incident {
  id                 String    @id @default(uuid())
  serviceId          String
  openedAt           DateTime  @default(now())
  closedAt           DateTime?
  reason             String?
  retryCount         Int       @default(0)
  lastNotificationAt DateTime?
  glpiTicketId       String?
  glpiTicketUrl      String?
  service            Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, openedAt])
  @@index([serviceId, closedAt])
}

model NotificationPolicy {
  id                    String   @id @default(uuid())
  serviceId             String?
  maxRetries            Int      @default(3)
  retryIntervalMinutes  Int      @default(2)
  escalateAfterMinutes  Int      @default(10)
  cooldownMinutes       Int      @default(15)
  recoveryConfirmations Int      @default(2)
  channels              String[] @default([])
  active                Boolean  @default(true)
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  service               Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, active])
}

enum Role {
  ADMIN
  USER
}

enum ServiceType {
  HTTP
  PING
  SNMP
  WEBHOOK
}
